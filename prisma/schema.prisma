// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum AccountType{
//   SPOTIFY
//   YOUTUBE
// }

model User {
  id                String          @id
  createdAt         DateTime        @default(now())
  roomParticipating Room[]          @relation("RoomParticipants")
  roomMaster        Room[]          @relation("RoomMaster")
  roomId            String?
  queueItem         QueueItem[]
  Upvote            Upvote[]
  Downvote          Downvote[]
  SpotifyAccount    SpotifyAccount?
}

model SpotifyAccount {
  id           String  @id @unique
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String  @unique
  isPremium    Boolean @default(false)
  country      String
  email        String
  displayName  String
  accessToken  String
  refreshToken String
  expiresIn    BigInt
  expiresAt    BigInt
  picture      String?
}

model Room {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  roomMaster     User     @relation("RoomMaster", fields: [roomMasterId], references: [id], onDelete: Cascade)
  tempPlaylistId String?
  roomMasterId   String
  name           String
  slug           String   @unique
  participants   User[]   @relation("RoomParticipants")
  queue          Queue?
  updatedAt      DateTime @updatedAt
}

model Queue {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  room      Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    String      @unique
  queueItem QueueItem[]
  updatedAt DateTime    @updatedAt
}

model Upvote {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  createdBy   User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  queueItem   QueueItem? @relation(fields: [queueItemId], references: [id])
  queueItemId String?

  @@unique([createdById, queueItemId])
}

model Downvote {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  createdBy   User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  queueItem   QueueItem? @relation(fields: [queueItemId], references: [id])
  queueItemId String?
}

model QueueItem {
  id        String     @id @default(uuid())
  index     Int
  createdAt DateTime   @default(now())
  queue     Queue      @relation(fields: [queueId], references: [id], onDelete: Cascade)
  queueId   String
  trackId   String
  trackName String
  addedBy   User       @relation(fields: [addedById], references: [id], onDelete: Cascade)
  addedById String
  played    Boolean    @default(false)
  upvotes   Upvote[]
  downvotes Downvote[]
  album     String
  artist    String
  duration  Int
  image     String

  @@unique([queueId, index])
}
